class EnhancedFitting : public FittingStrategy {
public:
  void fit(DataPoint* data, int count, float* coeffs) override {
    if (count < 2) {
      coeffs[0] = coeffs[1] = coeffs[2] = coeffs[3] = 0;
      return;
    }

    // Normalize timestamps to start from 0 for numerical stability
    float t0 = data[0].timestamp;
    float normTimestamps[MAX_TEMPORARY];
    for (int i = 0; i < count; i++) {
      normTimestamps[i] = data[i].timestamp - t0;
    }

    // Initialize coefficients
    float sumT[4] = {0}, sumV = 0, sumTV[4] = {0};
    for (int i = 0; i < count; i++) {
      float t = normTimestamps[i];
      float v = data[i].value;

      sumT[0] += pow(t, 6);  // t^6 for higher order fitting
      sumT[1] += pow(t, 4);  // t^4
      sumT[2] += pow(t, 2);  // t^2
      sumT[3] += 1;          // t^0

      sumV += v;
      sumTV[0] += pow(t, 3) * v;
      sumTV[1] += pow(t, 2) * v;
      sumTV[2] += t * v;
      sumTV[3] += v;
    }

    // Solve for coefficients using weighted least squares
    coeffs[0] = sumTV[0] / sumT[0];  // a3
    coeffs[1] = sumTV[1] / sumT[1];  // a2
    coeffs[2] = sumTV[2] / sumT[2];  // a1
    coeffs[3] = sumTV[3] / sumT[3];  // a0

    // Iterative refinement loop
    for (int iter = 0; iter < 3; iter++) {
      float residuals[MAX_TEMPORARY];
      for (int i = 0; i < count; i++) {
        float t = normTimestamps[i];
        float fittedValue = coeffs[0] * pow(t, 3) + coeffs[1] * pow(t, 2) + coeffs[2] * t + coeffs[3];
        residuals[i] = data[i].value - fittedValue;
      }

      // Adjust coefficients based on residuals
      for (int i = 0; i < count; i++) {
        float t = normTimestamps[i];
        coeffs[0] += 0.01 * residuals[i] * pow(t, 3);
        coeffs[1] += 0.01 * residuals[i] * pow(t, 2);
        coeffs[2] += 0.01 * residuals[i] * t;
        coeffs[3] += 0.01 * residuals[i];
      }
    }
  }
};
